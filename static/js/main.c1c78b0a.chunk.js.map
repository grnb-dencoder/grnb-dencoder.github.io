{"version":3,"sources":["config/ApiConfig.js","components/DencodeForm/DencodeForm.js","components/DencodeForm/index.js","components/DencodeFormWrapper/index.js","components/DencodeFormWrapper/DencodeFormWrapper.js","components/Loader/index.js","components/Loader/Loader.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["API_BASE","DencodeForm","props","uri","maxLength","submitButtonLabel","setShouldDecodeMessage","useState","secret","setSecret","message","setMessage","response","setResponse","isLoading","setLoading","Form","onSubmit","e","preventDefault","fetch","method","mode","headers","body","JSON","stringify","then","r","text","result","catch","console","error","Row","Col","Group","controlId","Label","className","Control","as","rows","value","onChange","target","onClick","debug","select","document","execCommand","readOnly","required","size","placeholder","Dropdown","ButtonGroup","Button","type","disabled","variant","Toggle","split","id","Menu","Item","defaultProps","DencodeFormWrapper","apiBase","shouldDecodeMessage","title","Loader","App","isApiAvailable","setApiAvailable","useEffect","ok","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1c78b0a.chunk.js","sourcesContent":["// export const API_BASE = 'http://localhost:8080'\nexport const API_BASE = 'https://dencoder.herokuapp.com'","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport {BsFileText, BsLockFill, BsUnlockFill} from \"react-icons/bs\";\n\nconst DencodeForm = (props) => {\n\n  const {uri, maxLength, submitButtonLabel, setShouldDecodeMessage} = props\n  const [secret, setSecret] = useState('')\n  const [message, setMessage] = useState('')\n  const [response, setResponse] = useState('')\n  const [isLoading, setLoading] = useState(false)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setLoading(true)\n    if (secret && message) {\n      fetch(uri, {\n        method: 'post',\n        mode: \"cors\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          secret,\n          message\n        })\n      })\n        .then(r => r.text())\n        .then(result => {\n          setResponse(result)\n          setLoading(false)\n        })\n        .catch(console.error)\n    }\n  }\n\n  const handleClickOnResultTextarea = ({target}) => {\n    console.debug(target.value)\n    target.select()\n    document.execCommand('copy');\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Row>\n        <Col>\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label className=\"w-100\">\n              <h4>\n                <BsFileText/> Place your message here\n              </h4>\n            </Form.Label>\n            <Form.Control as=\"textarea\"\n                          rows={20}\n                          value={message}\n                          onChange={(e) => setMessage(e.target.value)}\n                          maxLength={maxLength}\n            />\n          </Form.Group>\n        </Col>\n        <Col>\n          <Form.Group controlId=\"exampleForm.ControlTextarea2\">\n            <Form.Label className=\"w-100\">\n              <h4>\n                <BsFileText/> Result\n              </h4>\n            </Form.Label>\n            <Form.Control as=\"textarea\"\n                          rows={20}\n                          value={response}\n                          onClick={handleClickOnResultTextarea}\n                          readOnly\n            />\n          </Form.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form.Control\n            required\n            size=\"lg\"\n            value={secret}\n            onChange={(e) => setSecret(e.target.value)}\n            placeholder=\"Enter secret\"/>\n        </Col>\n        <Col>\n          <Dropdown as={ButtonGroup}\n                    className=\"w-100\">\n            <Button className=\"w-75\"\n                    size=\"lg\"\n                    type=\"submit\"\n                    disabled={isLoading}\n                    variant=\"success\"\n            >\n              {isLoading ? 'Loading...' : submitButtonLabel}\n            </Button>\n\n            <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\"/>\n\n            <Dropdown.Menu>\n              <Dropdown.Item onClick={() => setShouldDecodeMessage(false)}>\n                <BsLockFill/> Encode message\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => setShouldDecodeMessage(true)}>\n                <BsUnlockFill/> Decode message\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nDencodeForm.propTypes = {\n  uri: PropTypes.string,\n  title: PropTypes.string,\n  submitButtonLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  maxLength: PropTypes.number,\n  setShouldDecodeMessage: PropTypes.func,\n}\n\nDencodeForm.defaultProps = {\n  maxLength: 1000,\n  submitButtonLabel: 'Submit',\n  setShouldDecodeMessage: () => {\n  }\n}\n\nexport default DencodeForm\n\n","import DencodeForm from \"./DencodeForm\";\n\nexport default DencodeForm","import DencodeFormWrapper from \"./DencodeFormWrapper\";\n\nexport default DencodeFormWrapper","import React, {useState} from \"react\";\nimport './DencodeFormWrapper.css'\nimport PropTypes from 'prop-types'\nimport {FormCheck} from \"react-bootstrap\";\nimport DencodeForm from \"../DencodeForm\";\n\nconst DencodeFormWrapper = (props) => {\n\n  const {apiBase} = props\n  const [shouldDecodeMessage, setShouldDecodeMessage] = useState(false)\n\n  const handleSwitch = ({target}) => {\n    setShouldDecodeMessage(target.checked)\n  }\n\n  const getDencodeFormUrl = () => {\n    return apiBase + (shouldDecodeMessage ? '/api/decode' : '/api/encode')\n  }\n\n  const getSubmitButtonLabel = () => {\n    return shouldDecodeMessage ? 'Decode message' : 'Encode message'\n  }\n\n  return (\n    <div className=\"DencodeFormWrapper\">\n      <DencodeForm\n        title=\"Encode message\"\n        uri={getDencodeFormUrl()}\n        setShouldDecodeMessage={setShouldDecodeMessage}\n        submitButtonLabel={getSubmitButtonLabel()}\n      />\n    </div>\n  )\n}\n\nDencodeFormWrapper.propTypes = {\n  apiBase: PropTypes.string\n}\n\nexport default DencodeFormWrapper","import Loader from \"./Loader\";\n\nexport default Loader","import React from 'react'\nimport './Loader.css'\n\nconst Loader = () => {\n  return (\n    <div className=\"loadingio-spinner-rolling-dhx6txuyq7t\">\n      <div className=\"ldio-cc90iqua8id\">\n        <div/>\n      </div>\n    </div>\n  )\n}\n\nexport default Loader","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {API_BASE} from \"../../config/ApiConfig\";\nimport DencodeFormWrapper from \"../DencodeFormWrapper\";\nimport Loader from \"../Loader\";\n\nconst App = () => {\n\n  const [isApiAvailable, setApiAvailable] = useState(false);\n\n  const checkIsApiAvailable = () => {\n    return fetch(API_BASE)\n  }\n\n  useEffect(() => {\n    console.debug(\"App did mounted\")\n    checkIsApiAvailable()\n      .then(r => setApiAvailable(r.ok))\n      .catch(() => setApiAvailable(false))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          isApiAvailable ?\n            (\n              <DencodeFormWrapper\n                apiBase={API_BASE}\n              />\n            )\n            :\n            (\n              <>\n              <Loader/>\n              <h1>Initializing the application...</h1>\n              </>\n            )\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}